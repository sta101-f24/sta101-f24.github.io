{
  "hash": "65e7f8e5c460cf3cb6d65028a6b52890",
  "result": {
    "engine": "knitr",
    "markdown": "---\n  title: \"Simple linear regression\"\n---\n\n\nThe simple linear regression model relates a predictor $x$ to a response $y$ via a linear function with error:\n\n$$\ny=\\beta_0+\\beta_1x+\\varepsilon.\n$$\n\nThis primer leads you down the path of least resistance to fitting this model, creating a scatterplot with the best fit line added to it, and producing a table with the coefficient estimates ($\\hat{\\beta}_0,\\,\\hat{\\beta}_1$).\n\n## Setup\n\nThe commands for working with linear regressions are in the `tidymodels` package, so load that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(tidymodels) \n```\n:::\n\n\nNext, we need something to model, so let us load in a data set. We will consider this data set on the stock price of Microsoft and Apple (introduced during Lecture 6 on 9/12/2024):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks <- read_csv(\"stocks.csv\")\n```\n:::\n\n\n::: callout-note\nRecalling the information [here](https://sta101-f24.github.io/computing/computing-file-paths.html), be prepared to adjust the file path to match how you have organized your files and folders.\n:::\n\nTo keep things simple, we’ll work with a subset of the data, stock prices in January 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks_jan2020 <- stocks |>\n  filter(month(date) == 1 & year(date) == 2020)\n```\n:::\n\n\n## Plotting the least squares regression line (\"line of best fit\")\n\nThis chunk of code creates a scatter plot of the Microsoft and Apple opening stock prices on the various trading days of January 2020, and it adds the line of best fit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(stocks_jan2020, aes(x = MSFT.Open, y = AAPL.Open)) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\n  labs(\n    title = \"Daily stock price data\",\n    subtitle = \"January 2020\",\n    x = \"Microsoft opening price\",\n    y = \"Apple opening price\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](computing-regression_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nSo, all we have to do is add a new `geom_WHAT` layer to a scatterplot to add the line. This is what `geom_smooth` is doing. If you set `se = TRUE`, you get the band indicating the margin of error. Try it out!\n\n## What are the coefficient estimates?\n\nThis code will give you a table with the estimates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstock_fit <- linear_reg() |>\n  fit(AAPL.Open ~ MSFT.Open, data = stocks_jan2020)\n\ntidy(stock_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic      p.value\n  <chr>          <dbl>     <dbl>     <dbl>        <dbl>\n1 (Intercept)    3.31     8.87       0.373 0.713       \n2 MSFT.Open      0.454    0.0541     8.40  0.0000000808\n```\n\n\n:::\n:::\n\n\nThere is a lot going on in that table, and we will explore some of it later, but focus on the first column for now. This column gives the estimates $\\hat{\\beta}_0,\\,\\hat{\\beta}_1$. The first row has the estimate $\\hat{\\beta}_0$ of the intercept, and the second row has the estimate $\\hat{\\beta}_1$ of the slope. So the fitted model here is: $$\n\\begin{align*}\n\\widehat{\\text{AAPL}}&=\\hat{\\beta}_0+\\hat{\\beta}_1{\\text{MSFT}}\\\\\n&\\approx3.31+0.45\\cdot{\\text{MSFT}}.\n\\end{align*}\n$$ So\n\n-   3.31 is the price you would predict for Apple stock if you knew Microsoft stock was opening at \\$0;\n-   0.45 is the price increase in Apple stock that you would predict if Microsoft stock became more expensive by \\$1 (remember, slope = rise/run, so $\\Delta\\text{AAPL}/\\Delta\\text{MSFT}$ in this case).\n\nThe syntax in the `fit` commands is like `fit(y ~ x)`. So the variable to the left of the `~` will be treated as the response variable ($y$), and the variable to the right will be treated as the predictor ($x$).\n",
    "supporting": [
      "computing-regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}